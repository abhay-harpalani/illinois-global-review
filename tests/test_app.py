import pytestimport osimport shutilfrom app import app, Article, save_article, make_otpfrom PIL import Imageimport random'''current tests- app serves home page with no errors@TODO: tests to write- making one time passcode (OTP) for user creation- user creation with a valid OTP- login- logout- make new articles- edit new articles- testing editing on pre-existing test articles- make sure you get a 403 error when editing / accessing dashboard without logging in- logout and make sure you also get 403 errors'''# directory where the actual app's files are storedwebapp_root = '../app'tests_root = '.'# paths to replicate real app directoriestest_articles_path = os.path.join(tests_root, 'articles')test_static_path = os.path.join(tests_root, 'static')test_templates_path = os.path.join(tests_root, 'templates')test_users_path = os.path.join(tests_root, 'users')test_new_user_otp_list = os.path.join(tests_root, 'new_user_otp_list.txt')# subdirectories of statictest_article_img_path = os.path.join(test_static_path, 'article_img')test_css_path = os.path.join(test_static_path, 'css')test_img_path = os.path.join(test_static_path, 'img')# paths of actual app filesreal_templates_path = os.path.join(webapp_root, 'templates')real_css_path = os.path.join(webapp_root, 'static/css')''' helper functions '''def make_test_article() -> Article:	assert os.path.isdir('articles')	title = 'test title'	author = 'test author'	article_id = str(random.randint(0, 2 ** 31))	creation_date_epoch = '1000000000'	edit_date_epoch = '1000000100'	tags = ['na', 'sa']	cover_image_name = 'test_image.jpg'	cover_image_alt_text = 'test alt text'	cover_image_source = 'example.com'	body = 'test body'	img = Image.new('RGB', (200, 200), 'white')  # create a default white image	img.save(cover_image_name)	test_article = Article(title, author, article_id, creation_date_epoch, edit_date_epoch, tags, cover_image_name,	                       cover_image_alt_text, cover_image_source, body)	save_article(test_article)	yield test_article	# delete the test cover image which was created earlier	os.remove(cover_image_name)# create all files and subdirectories needed for testing the app, wait for the test to finish, then clean up@pytest.fixturedef setup_then_teardown_app():	# check we are in tests directory	assert os.getcwd()[-len('/tests'):] == '/tests'	folders = [test_articles_path, test_static_path, test_users_path, test_article_img_path, test_articles_path,	           test_img_path]	for path in folders:		if os.path.exists(path):			shutil.rmtree(path)		os.mkdir(path)	# copy all the http template files from ../app/templates to ./templates	if os.path.exists(test_templates_path):		shutil.rmtree(test_templates_path)	shutil.copytree(real_templates_path, test_templates_path, dirs_exist_ok=False)	# copy all the css files from ../app/static/css to ./static/css	if os.path.exists(test_css_path):		shutil.rmtree(test_css_path)	shutil.copytree(real_css_path, test_css_path, dirs_exist_ok=False)	with open(test_new_user_otp_list, 'w') as f:		# create otp list file (write nothing for now)		f.write('')	yield '.'	# teardown app	if os.path.isfile('.env'):		os.remove('.env')	if os.path.isdir(test_articles_path):		shutil.rmtree(test_articles_path)	if os.path.isdir(test_static_path):		shutil.rmtree(test_static_path)	if os.path.isdir(test_users_path):		shutil.rmtree(test_users_path)	if os.path.isdir(test_templates_path):		shutil.rmtree(test_templates_path)	if os.path.isfile(test_new_user_otp_list):		os.remove(test_new_user_otp_list)@pytest.fixturedef client(setup_then_teardown_app):	# configure app for testing	app.config['TESTING'] = True	# app.config['WTF_CSRF_ENABLED'] = False # disable CSRF for testing	# app.config['DEBUG'] = False	# create a test client	with app.test_client() as client:		yield clientdef test_make_otp(client):	test_otp = make_otp(test_new_user_otp_list)	expected_content = test_otp + '\n'	with open(test_new_user_otp_list, 'r') as f:		# check new_user_otp_list.txt exists		assert os.path.isfile(test_new_user_otp_list)		# check that the file is the correct format		assert f.read() == expected_contentdef test_make_one_article(client):	test_article = make_test_article()	article_path = 'articles/' + test_article.article_id + '.txt'	assert os.path.isfile(article_path)	with open(article_path, 'r') as f:		line_count = len(f.readlines())	assert line_count == 10def test_landing_page_with_no_articles(client):	index = client.get('/')	html = index.data.decode()	assert index.status_code == 200	assert 'Illinois Global Review' in html	assert '<title>UIUC IGR | Home</title>' in html